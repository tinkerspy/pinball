#pragma once

/* Custom firmware for the Atm_device programmable pinball device class
 *  
 *  tictactoe
 *  
 *  playfield.device( <switch-id> ); // Instantiates object
 *  playfield.device( <switch-id>, <led-id>, <firmware> ); // Initializes object
 *  
 */

namespace custom_firmware {

const char game_bytecode[] = R""""(
init, press_start, release_start, ball_exit, sub_wait_players, sub_wait_reset, sub_loop, \
sub_ball_loop, sub_player_loop, sub_core, sub_wait_playing, sub_wait_collecting, sub_press_start
out_init, out_enable, out_counter_reset, out_players_zero, out_ball_zero,\
out_player_zero, out_ball_adv, out_player_adv, out_3bonus, out_collect,\
out_kickoff, out_over, out_players_adv, out_disable
arg_collecting, arg_again, arg_counter0, arg_counter1,\
arg_counter2, arg_counter3, arg_counter4, arg_counter5
reg_state, reg_max_players, reg_no_of_players, reg_player, reg_no_of_balls,\
reg_ball, reg_ball_cntr
msg_init, msg_wait_start, msg_ball_loop, msg_player_loop, msg_counter_reset, msg_add_player


// TODO tilt!
sub_press_start
R, -1, -1, reg_ball_cntr       // Exit if we're already in play
>,  0, -1, 0
R, -1, -1, reg_no_of_players   // Exit 
=,  6,  0, 2
R, -1, -1, reg_max_players 
=,  6, -1, 0
R, -1, -1, reg_no_of_players
=,  5,  0, 2
R, -1, -1, reg_max_players
=,  5, -1, 0
R, -1, -1, reg_no_of_players
=,  4,  0, 2
R, -1, -1, reg_max_players
=,  4, -1, 0
R, -1, -1, reg_no_of_players
=,  3,  0, 2
R, -1, -1, reg_max_players
=,  3, -1, 0
R, -1, -1, reg_no_of_players
=,  2,  0, 2
R, -1, -1, reg_max_players
=,  2, -1, 0
R, -1, -1, reg_no_of_players
=,  1,  0, 2
R, -1, -1, reg_max_players
=,  1, -1, 0
R, -1, -1, reg_no_of_players
T, -1, -1, out_players_adv
I, -1, -1, 1
Q, reg_no_of_players, -1, msg_add_player;

init
P, -1, -1, 1                    // Persistent
T, -1, -1, out_init             
W, -1, -1, 100                
R, -1, -1, 0
D, -1, -1, reg_no_of_balls
R, -1, -1, 1
D, -1, -1, reg_max_players
R, -1, -1, 0
Z, -1, -1, 0
A, -1, -1, sub_loop;

sub_loop
T, -1, -1, out_over
R, -1, -1, reg_ball_cntr
Z, -1, -1, 0
R, -1, -1, reg_no_of_players
Z, -1, -1, 0
E, press_start, 0, 0            // Clear press event
Q, -1, -1, msg_wait_start
S, -1, -1, sub_wait_players     // Wait for a front button press to start game
W, -1, -1, 100
Q, -1, -1, msg_init
T, -1, -1, out_init
T, -1, -1, out_players_zero
T, -1, -1, out_ball_zero
T, -1, -1, out_counter_reset
S, -1, -1, sub_wait_reset
R, -1, -1, reg_no_of_balls
D, -1, -1, reg_ball
T, -1, -1, out_player_zero
S, -1, -1, sub_ball_loop
A, -1, -1, sub_loop;

sub_ball_loop
Q, reg_ball, -1, msg_ball_loop
R, -1, -1, reg_no_of_players
D, -1, -1, reg_player
T, -1, -1, out_player_zero
W, -1, -1, 11
S, -1, -1, sub_player_loop
W, -1, -1, 12
R, -1, -1, reg_ball
I, -1, -1, -1
=,  0, -1, 0
T, -1, -1, out_ball_adv
A, -1, -1, sub_ball_loop;

sub_player_loop
Q, reg_player, -1, msg_player_loop
S, -1, -1, sub_core
J, arg_again, -2, 0
R, -1, -1, reg_player
I, -1, -1, -1
=,  0, -1, 0
T, -1, -1, out_player_adv
A, -1, -1, sub_player_loop;

sub_core
W, -1, -1, 500
R, -1, -1, reg_ball
T,  1,  out_3bonus, -1
T, -1, -1, out_init
W, -1, -1, 100
T, -1, -1, out_kickoff
W, -1, -1, 1000
T, -1, -1, out_enable
W, -1, -1, 100
E, ball_exit, 0, 0                // Clear press_exit event
S, -1, -1, sub_wait_playing
T, -1, -1, out_disable
W, -1, -1, 100
T, -1, -1, out_collect
W, -1, -1, 100
S, -1, -1, sub_wait_collecting
W, -1, -1, 100
R, -1, -1, reg_ball_cntr
I, -1, -1, 1
=,  1,  0, -1
R, -1, -1, reg_no_of_players
D, -1, -1, reg_player;

sub_wait_players
R, -1, -1, reg_no_of_players
W, -1, -1, 0
E, press_start, 0, 2                // On event set no of players to 1
Z, -1, -1, 1
J, -1, -1, -1                       // and exit sub
A, -1, -1, sub_wait_players;        // else keep looping

sub_wait_reset                      // busy loop: waiting for counter reset to finish
Q, reg_max_players, -1, msg_counter_reset
W, -1, -1, 100
E, press_start, 0, 1                // On event increment no of players
S, -1, -1, sub_press_start
J, arg_counter0, -4, 0
J, arg_counter1, -5, 0
J, arg_counter2, -6, 0
J, arg_counter3, -7, 0
J, arg_counter4, -8, 0
J, arg_counter5, -9, 0;

sub_wait_playing                    // Central game loop: process ball_exit & frontbtn press
R, -1, -1, reg_no_of_players
W, -1, -1, 0
E, press_start, 0, 1                // On event set no of players to 1
S, -1, -1, sub_press_start
E, ball_exit, -1, -4;

sub_wait_collecting
W, -1, -1, 100
J, arg_collecting, -2, -1;
)"""";

const char game_symbin[] = {
  "\x78\x56\x34\x12\xb0\x00\x00\x00" "init\0press_start\0release_start\0ball_exit\0sub_wait_players\0sub_wait_reset\0sub_loop\0sub_ball_loop\0sub_player_loop\0sub_core\0sub_wait_playing\0sub_wait_collecting\0sub_press_start\0\0\0"
  "\x78\x56\x34\x12\xbc\x00\x00\x00" "out_init\0out_enable\0out_counter_reset\0out_players_zero\0out_ball_zero\0out_player_zero\0out_ball_adv\0out_player_adv\0out_3bonus\0out_collect\0out_kickoff\0out_over\0out_players_adv\0out_disable\0\0\0\0"
  "\x78\x56\x34\x12\x68\x00\x00\x00" "arg_collecting\0arg_again\0arg_counter0\0arg_counter1\0arg_counter2\0arg_counter3\0arg_counter4\0arg_counter5\0\0"
  "\x78\x56\x34\x12\x60\x00\x00\x00" "reg_state\0reg_max_players\0reg_no_of_players\0reg_player\0reg_no_of_balls\0reg_ball\0reg_ball_cntr\0\0\0"
  "\x00\x00\x00\x00\x00\x00\x00\x00" "msg_init\0msg_wait_start\0msg_ball_loop\0msg_player_loop\0msg_counter_reset\0msg_add_player\0\0"
};

const uint16_t game_hexbin[] = {
  0x0089, 0x0000, 0x0000, 0x0000, 0x01B3, 0x01CD, 0x00B3, 0x0105, 0x0137, 0x0159, 0x01F7, 0x020D, 
  0x000F, 0xFFFF, 0x000C, 0x0052, 0xFFFF, 0xFFFF, 0x0006, 0x003E, 0x0000, 0xFFFF, 0x0000, 0x0052, 
  0xFFFF, 0xFFFF, 0x0002, 0x003D, 0x0006, 0x0000, 0x0002, 0x0052, 0xFFFF, 0xFFFF, 0x0001, 0x003D, 
  0x0006, 0xFFFF, 0x0000, 0x0052, 0xFFFF, 0xFFFF, 0x0002, 0x003D, 0x0005, 0x0000, 0x0002, 0x0052, 
  0xFFFF, 0xFFFF, 0x0001, 0x003D, 0x0005, 0xFFFF, 0x0000, 0x0052, 0xFFFF, 0xFFFF, 0x0002, 0x003D, 
  0x0004, 0x0000, 0x0002, 0x0052, 0xFFFF, 0xFFFF, 0x0001, 0x003D, 0x0004, 0xFFFF, 0x0000, 0x0052, 
  0xFFFF, 0xFFFF, 0x0002, 0x003D, 0x0003, 0x0000, 0x0002, 0x0052, 0xFFFF, 0xFFFF, 0x0001, 0x003D, 
  0x0003, 0xFFFF, 0x0000, 0x0052, 0xFFFF, 0xFFFF, 0x0002, 0x003D, 0x0002, 0x0000, 0x0002, 0x0052, 
  0xFFFF, 0xFFFF, 0x0001, 0x003D, 0x0002, 0xFFFF, 0x0000, 0x0052, 0xFFFF, 0xFFFF, 0x0002, 0x003D, 
  0x0001, 0x0000, 0x0002, 0x0052, 0xFFFF, 0xFFFF, 0x0001, 0x003D, 0x0001, 0xFFFF, 0x0000, 0x0052, 
  0xFFFF, 0xFFFF, 0x0002, 0x0054, 0xFFFF, 0xFFFF, 0x000C, 0x0049, 0xFFFF, 0xFFFF, 0x0001, 0x0051, 
  0x0002, 0xFFFF, 0x0005, 0xFFFF, 0x0000, 0x0050, 0xFFFF, 0xFFFF, 0x0001, 0x0054, 0xFFFF, 0xFFFF, 
  0x0000, 0x0059, 0xFFFF, 0xFFFF, 0x0064, 0x0052, 0xFFFF, 0xFFFF, 0x0000, 0x0044, 0xFFFF, 0xFFFF, 
  0x0004, 0x0052, 0xFFFF, 0xFFFF, 0x0001, 0x0044, 0xFFFF, 0xFFFF, 0x0001, 0x0052, 0xFFFF, 0xFFFF, 
  0x0000, 0x005A, 0xFFFF, 0xFFFF, 0x0000, 0x0041, 0xFFFF, 0xFFFF, 0x0006, 0xFFFF, 0x0006, 0x0054, 
  0xFFFF, 0xFFFF, 0x000B, 0x0052, 0xFFFF, 0xFFFF, 0x0006, 0x005A, 0xFFFF, 0xFFFF, 0x0000, 0x0052, 
  0xFFFF, 0xFFFF, 0x0002, 0x005A, 0xFFFF, 0xFFFF, 0x0000, 0x0045, 0x0001, 0x0000, 0x0000, 0x0051, 
  0xFFFF, 0xFFFF, 0x0001, 0x0053, 0xFFFF, 0xFFFF, 0x0004, 0x0057, 0xFFFF, 0xFFFF, 0x0064, 0x0051, 
  0xFFFF, 0xFFFF, 0x0000, 0x0054, 0xFFFF, 0xFFFF, 0x0000, 0x0054, 0xFFFF, 0xFFFF, 0x0003, 0x0054, 
  0xFFFF, 0xFFFF, 0x0004, 0x0054, 0xFFFF, 0xFFFF, 0x0002, 0x0053, 0xFFFF, 0xFFFF, 0x0005, 0x0052, 
  0xFFFF, 0xFFFF, 0x0004, 0x0044, 0xFFFF, 0xFFFF, 0x0005, 0x0054, 0xFFFF, 0xFFFF, 0x0005, 0x0053, 
  0xFFFF, 0xFFFF, 0x0007, 0x0041, 0xFFFF, 0xFFFF, 0x0006, 0xFFFF, 0x0007, 0x0051, 0x0005, 0xFFFF, 
  0x0002, 0x0052, 0xFFFF, 0xFFFF, 0x0002, 0x0044, 0xFFFF, 0xFFFF, 0x0003, 0x0054, 0xFFFF, 0xFFFF, 
  0x0005, 0x0057, 0xFFFF, 0xFFFF, 0x000B, 0x0053, 0xFFFF, 0xFFFF, 0x0008, 0x0057, 0xFFFF, 0xFFFF, 
  0x000C, 0x0052, 0xFFFF, 0xFFFF, 0x0005, 0x0049, 0xFFFF, 0xFFFF, 0xFFFF, 0x003D, 0x0000, 0xFFFF, 
  0x0000, 0x0054, 0xFFFF, 0xFFFF, 0x0006, 0x0041, 0xFFFF, 0xFFFF, 0x0007, 0xFFFF, 0x0008, 0x0051, 
  0x0003, 0xFFFF, 0x0003, 0x0053, 0xFFFF, 0xFFFF, 0x0009, 0x004A, 0x0001, 0xFFFE, 0x0000, 0x0052, 
  0xFFFF, 0xFFFF, 0x0003, 0x0049, 0xFFFF, 0xFFFF, 0xFFFF, 0x003D, 0x0000, 0xFFFF, 0x0000, 0x0054, 
  0xFFFF, 0xFFFF, 0x0007, 0x0041, 0xFFFF, 0xFFFF, 0x0008, 0xFFFF, 0x0009, 0x0057, 0xFFFF, 0xFFFF, 
  0x01F4, 0x0052, 0xFFFF, 0xFFFF, 0x0005, 0x0054, 0x0001, 0x0008, 0xFFFF, 0x0054, 0xFFFF, 0xFFFF, 
  0x0000, 0x0057, 0xFFFF, 0xFFFF, 0x0064, 0x0054, 0xFFFF, 0xFFFF, 0x000A, 0x0057, 0xFFFF, 0xFFFF, 
  0x03E8, 0x0054, 0xFFFF, 0xFFFF, 0x0001, 0x0057, 0xFFFF, 0xFFFF, 0x0064, 0x0045, 0x0003, 0x0000, 
  0x0000, 0x0053, 0xFFFF, 0xFFFF, 0x000A, 0x0054, 0xFFFF, 0xFFFF, 0x000D, 0x0057, 0xFFFF, 0xFFFF, 
  0x0064, 0x0054, 0xFFFF, 0xFFFF, 0x0009, 0x0057, 0xFFFF, 0xFFFF, 0x0064, 0x0053, 0xFFFF, 0xFFFF, 
  0x000B, 0x0057, 0xFFFF, 0xFFFF, 0x0064, 0x0052, 0xFFFF, 0xFFFF, 0x0006, 0x0049, 0xFFFF, 0xFFFF, 
  0x0001, 0x003D, 0x0001, 0x0000, 0xFFFF, 0x0052, 0xFFFF, 0xFFFF, 0x0002, 0x0044, 0xFFFF, 0xFFFF, 
  0x0003, 0xFFFF, 0x0004, 0x0052, 0xFFFF, 0xFFFF, 0x0002, 0x0057, 0xFFFF, 0xFFFF, 0x0000, 0x0045, 
  0x0001, 0x0000, 0x0002, 0x005A, 0xFFFF, 0xFFFF, 0x0001, 0x004A, 0xFFFF, 0xFFFF, 0xFFFF, 0x0041, 
  0xFFFF, 0xFFFF, 0x0004, 0xFFFF, 0x0005, 0x0051, 0x0001, 0xFFFF, 0x0004, 0x0057, 0xFFFF, 0xFFFF, 
  0x0064, 0x0045, 0x0001, 0x0000, 0x0001, 0x0053, 0xFFFF, 0xFFFF, 0x000C, 0x004A, 0x0002, 0xFFFC, 
  0x0000, 0x004A, 0x0003, 0xFFFB, 0x0000, 0x004A, 0x0004, 0xFFFA, 0x0000, 0x004A, 0x0005, 0xFFF9, 
  0x0000, 0x004A, 0x0006, 0xFFF8, 0x0000, 0x004A, 0x0007, 0xFFF7, 0x0000, 0xFFFF, 0x000A, 0x0052, 
  0xFFFF, 0xFFFF, 0x0002, 0x0057, 0xFFFF, 0xFFFF, 0x0000, 0x0045, 0x0001, 0x0000, 0x0001, 0x0053, 
  0xFFFF, 0xFFFF, 0x000C, 0x0045, 0x0003, 0xFFFF, 0xFFFC, 0xFFFF, 0x000B, 0x0057, 0xFFFF, 0xFFFF, 
  0x0064, 0x004A, 0x0000, 0xFFFE, 0xFFFF, 0xFFFF, 0xFFFF
};

// 3 losse timers ( in units van 1/10 s)
// cycle aanroep 10 p/s
//

const char animation_bytecode[] = R""""(
init, cycle, sub_led0, sub_led1, sub_led2

arg_led0, arg_led1, arg_led2
reg_t0, reg_t1, reg_t2


init
P, -1, -1, 1  
L, -1, -1, arg_led0
L, -1, -1, arg_led1
L, -1, -1, arg_led2
A, -1, -1, cycle;

cycle
W, -1, -1, 100
S, -1, -1, sub_led0
S, -1, -1, sub_led1
S, -1, -1, sub_led2
A, -1, -1, cycle;

sub_led0
R, -1, -1, reg_t0
I, -1, -1, -1
<,  1,  0, -1
Z, -1, -1, 8 
J, arg_led0, 0, 2
L, -1, -1, arg_led0
J, -1, -1, -1
H, -1, -1, arg_led0;

sub_led1
R, -1, -1, reg_t1
I, -1, -1, -1
<,  1,  0, -1
Z, -1, -1, 5 
J, arg_led1, 0, 2
L, -1, -1, arg_led1
J, -1, -1, -1
H, -1, -1, arg_led1;

sub_led2
R, -1, -1, reg_t2
I, -1, -1, -1
<,  1,  0, -1
Z, -1, -1, 7 
J, arg_led2, 0, 2
L, -1, -1, arg_led2
J, -1, -1, -1
H, -1, -1, arg_led2;

)"""";

const char animation_symbin[] = {
  "\x78\x56\x34\x12\x28\x00\x00\x00" "init\0cycle\0sub_led0\0sub_led1\0sub_led2\0\0\0"
  "\x78\x56\x34\x12\x04\x00\x00\x00" "\0\0\0\0"
  "\x78\x56\x34\x12\x1c\x00\x00\x00" "arg_led0\0arg_led1\0arg_led2\0\0"
  "\x00\x00\x00\x00\x00\x00\x00\x00" "reg_t0\0reg_t1\0reg_t2\0\0"
};

const uint16_t animation_hexbin[] = {
  0x0007, 0x001D, 0x0033, 0x0055, 0x0077, 0xFFFF, 0x0000, 0x0050, 0xFFFF, 0xFFFF, 0x0001, 0x004C, 
  0xFFFF, 0xFFFF, 0x0000, 0x004C, 0xFFFF, 0xFFFF, 0x0001, 0x004C, 0xFFFF, 0xFFFF, 0x0002, 0x0041, 
  0xFFFF, 0xFFFF, 0x0001, 0xFFFF, 0x0001, 0x0057, 0xFFFF, 0xFFFF, 0x0064, 0x0053, 0xFFFF, 0xFFFF, 
  0x0002, 0x0053, 0xFFFF, 0xFFFF, 0x0003, 0x0053, 0xFFFF, 0xFFFF, 0x0004, 0x0041, 0xFFFF, 0xFFFF, 
  0x0001, 0xFFFF, 0x0002, 0x0052, 0xFFFF, 0xFFFF, 0x0000, 0x0049, 0xFFFF, 0xFFFF, 0xFFFF, 0x003C, 
  0x0001, 0x0000, 0xFFFF, 0x005A, 0xFFFF, 0xFFFF, 0x0008, 0x004A, 0x0000, 0x0000, 0x0002, 0x004C, 
  0xFFFF, 0xFFFF, 0x0000, 0x004A, 0xFFFF, 0xFFFF, 0xFFFF, 0x0048, 0xFFFF, 0xFFFF, 0x0000, 0xFFFF, 
  0x0003, 0x0052, 0xFFFF, 0xFFFF, 0x0001, 0x0049, 0xFFFF, 0xFFFF, 0xFFFF, 0x003C, 0x0001, 0x0000, 
  0xFFFF, 0x005A, 0xFFFF, 0xFFFF, 0x0005, 0x004A, 0x0001, 0x0000, 0x0002, 0x004C, 0xFFFF, 0xFFFF, 
  0x0001, 0x004A, 0xFFFF, 0xFFFF, 0xFFFF, 0x0048, 0xFFFF, 0xFFFF, 0x0001, 0xFFFF, 0x0004, 0x0052, 
  0xFFFF, 0xFFFF, 0x0002, 0x0049, 0xFFFF, 0xFFFF, 0xFFFF, 0x003C, 0x0001, 0x0000, 0xFFFF, 0x005A, 
  0xFFFF, 0xFFFF, 0x0007, 0x004A, 0x0002, 0x0000, 0x0002, 0x004C, 0xFFFF, 0xFFFF, 0x0002, 0x004A, 
  0xFFFF, 0xFFFF, 0xFFFF, 0x0048, 0xFFFF, 0xFFFF, 0x0002, 0xFFFF, 0xFFFF
};

// Williams OXO tic-tac-toe game

const char tictactoe_bytecode[] = R""""(
init, oxo_1o, oxo_1x, oxo_2o, oxo_2x, oxo_3o, oxo_3x, oxo_4, oxo_5, oxo_6, oxo_7, oxo_8, oxo_9,\
toggle, collect, single, triple sub_collect, sub_match_123, sub_match_456, sub_match_789,\
sub_match_147, sub_match_258, sub_match_369, sub_match_159, sub_match_357, sub_match_all, sub_clear
out_score, out_win_row, out_win_all, out_collect
arg_1a, arg_1b, arg_1c, arg_2a, arg_2b, arg_2c, arg_3a, arg_3b, arg_3c, arg_4a, arg_4b, arg_4c,\
arg_5a, arg_5b, arg_5c, arg_6a, arg_6b, arg_6c, arg_7a, arg_7b, arg_7c, arg_8a, arg_8b, arg_8c,\
arg_9a, arg_9b, arg_9c, arg_x, arg_o, arg_triple, arg_collect


init
P, -1, -1, 1
L, -1, -1, arg_collect
S, -1, -1, sub_clear;

oxo_1o
J, arg_1a, -1, 0
J, arg_1b, -1, 0
H, -1, -1, arg_1a
H, -1, -1, arg_1c
S, -1, -1, sub_match_123
S, -1, -1, sub_match_147
S, -1, -1, sub_match_159
S, -1, -1, sub_match_all;

oxo_1x
J, arg_1a, -1, 0
J, arg_1b, -1, 0
H, -1, -1, arg_1b
S, -1, -1, sub_match_123
S, -1, -1, sub_match_147
S, -1, -1, sub_match_159
S, -1, -1, sub_match_all;

oxo_2o
J, arg_2a, -1, 0
J, arg_2b, -1, 0
H, -1, -1, arg_2a
H, -1, -1, arg_2c
S, -1, -1, sub_match_123
S, -1, -1, sub_match_258
S, -1, -1, sub_match_all;

oxo_2x
J, arg_2a, -1, 0
J, arg_2b, -1, 0
H, -1, -1, arg_2b
S, -1, -1, sub_match_123
S, -1, -1, sub_match_258
S, -1, -1, sub_match_all;

oxo_3o
J, arg_3a, -1, 0
J, arg_3b, -1, 0
H, -1, -1, arg_3a
H, -1, -1, arg_3c
S, -1, -1, sub_match_123
S, -1, -1, sub_match_369
S, -1, -1, sub_match_357
S, -1, -1, sub_match_all;

oxo_3x
J, arg_3a, -1, 0
J, arg_3b, -1, 0
H, -1, -1, arg_3b
S, -1, -1, sub_match_123
S, -1, -1, sub_match_369
S, -1, -1, sub_match_357
S, -1, -1, sub_match_all;

oxo_4
J, arg_4a, -1, 0
J, arg_4b, -1, 0
H, arg_x, arg_4b, arg_4a
H, arg_x, arg_4b, arg_4c
S, -1, -1, sub_match_147
S, -1, -1, sub_match_456
S, -1, -1, sub_match_all;

oxo_5
J, arg_5a, -1, 0
J, arg_5b, -1, 0
H, arg_x, arg_5b, arg_5a
H, arg_x, arg_5b, arg_5c
S, -1, -1, sub_match_159
S, -1, -1, sub_match_258
S, -1, -1, sub_match_357
S, -1, -1, sub_match_456
S, -1, -1, sub_match_all;

oxo_6
J, arg_6a, -1, 0
J, arg_6b, -1, 0
H, arg_x, arg_6b, arg_6a
H, arg_x, arg_6b, arg_6c
S, -1, -1, sub_match_369
S, -1, -1, sub_match_456
S, -1, -1, sub_match_all;

oxo_7
J, arg_7a, -1, 0
J, arg_7b, -1, 0
H, arg_x, arg_7b, arg_7a
H, arg_x, arg_7b, arg_7c
S, -1, -1, sub_match_789
S, -1, -1, sub_match_147
S, -1, -1, sub_match_357
S, -1, -1, sub_match_all;

oxo_8
J, arg_8a, -1, 0
J, arg_8b, -1, 0
H, arg_x, arg_8b, arg_8a
H, arg_x, arg_8b, arg_8c
S, -1, -1, sub_match_258
S, -1, -1, sub_match_789
S, -1, -1, sub_match_all;

oxo_9
J, arg_9a, -1, 0
J, arg_9b, -1, 0
H, arg_x, arg_9b, arg_9a
H, arg_x, arg_9b, arg_9c
S, -1, -1, sub_match_159
S, -1, -1, sub_match_369
S, -1, -1, sub_match_789
S, -1, -1, sub_match_all;

toggle
J, arg_x, 0, 3
L, -1, -1, arg_x
H, -1, -1, arg_o
J, -1, -1, -1
L, -1, -1, arg_o
H, -1, -1, arg_x;

single
L, -1, -1, arg_triple;

triple
H, -1, -1, arg_triple;

collect
H, -1, -1, arg_collect
S, -1, -1, sub_collect
J, arg_triple, 0, 4
W, -1, -1, 500
S, -1, -1, sub_collect
W, -1, -1, 500
S, -1, -1, sub_collect
Z, -1, -1, 0
L, -1, -1, arg_collect;

sub_match_123
J, arg_1a, 0,  2
J, arg_2a, 0, -1
J, arg_3a, 3, -1
J, arg_1b, 0, -1
J, arg_2b, 0, -1
J, arg_3b, 0, -1
T, -1, -1, out_win_row;

sub_match_456
J, arg_4a, 0,  2
J, arg_5a, 0, -1
J, arg_6a, 3, -1
J, arg_4b, 0, -1
J, arg_5b, 0, -1
J, arg_6b, 0, -1
T, -1, -1, out_win_row;

sub_match_789
J, arg_7a, 0,  2
J, arg_8a, 0, -1
J, arg_9a, 3, -1
J, arg_7b, 0, -1
J, arg_8b, 0, -1
J, arg_9b, 0, -1
T, -1, -1, out_win_row;

sub_match_147
J, arg_1a, 0,  2
J, arg_4a, 0, -1
J, arg_7a, 3, -1
J, arg_1b, 0, -1
J, arg_4b, 0, -1
J, arg_7b, 0, -1
T, -1, -1, out_win_row;

sub_match_258
J, arg_2a, 0,  2
J, arg_5a, 0, -1
J, arg_8a, 3, -1
J, arg_2b, 0, -1
J, arg_5b, 0, -1
J, arg_8b, 0, -1
T, -1, -1, out_win_row;

sub_match_369
J, arg_3a, 0,  2
J, arg_6a, 0, -1
J, arg_9a, 3, -1
J, arg_3b, 0, -1
J, arg_6b, 0, -1
J, arg_9b, 0, -1
T, -1, -1, out_win_row;

sub_match_159
J, arg_1a, 0,  2
J, arg_5a, 0, -1
J, arg_9a, 3, -1
J, arg_1b, 0, -1
J, arg_5b, 0, -1
J, arg_9b, 0, -1
T, -1, -1, out_win_row;

sub_match_357
J, arg_3a, 0,  2
J, arg_5a, 0, -1
J, arg_7a, 3, -1
J, arg_3b, 0, -1
J, arg_5b, 0, -1
J, arg_7b, 0, -1
T, -1, -1, out_win_row;

sub_match_all
T, -1, -1, out_score
Z, -1, -1, 0
I, arg_1a, 1, 0
I, arg_2a, 1, 0
I, arg_3a, 1, 0
I, arg_4a, 1, 0
I, arg_5a, 1, 0
I, arg_6a, 1, 0
I, arg_7a, 1, 0
I, arg_8a, 1, 0
I, arg_9a, 1, 0
I, arg_1b, 1, 0
I, arg_2b, 1, 0
I, arg_3b, 1, 0
I, arg_4b, 1, 0
I, arg_5b, 1, 0
I, arg_6b, 1, 0
I, arg_7b, 1, 0
I, arg_8b, 1, 0
I, arg_9b, 1, 0
T, 9, out_win_all, -1;

sub_clear
L, -1, -1, arg_1a
L, -1, -1, arg_1b
L, -1, -1, arg_1c
L, -1, -1, arg_2a
L, -1, -1, arg_2b
L, -1, -1, arg_2c
L, -1, -1, arg_3a
L, -1, -1, arg_3b
L, -1, -1, arg_3c
L, -1, -1, arg_4a
L, -1, -1, arg_4b
L, -1, -1, arg_4c
L, -1, -1, arg_5a
L, -1, -1, arg_5b
L, -1, -1, arg_5c
L, -1, -1, arg_6a
L, -1, -1, arg_6b
L, -1, -1, arg_6c
L, -1, -1, arg_7a
L, -1, -1, arg_7b
L, -1, -1, arg_7c
L, -1, -1, arg_8a
L, -1, -1, arg_8b
L, -1, -1, arg_8c
L, -1, -1, arg_9a
L, -1, -1, arg_9b
L, -1, -1, arg_9c
L, -1, -1, arg_x
H, -1, -1, arg_o
L, -1, -1, arg_triple;

sub_collect
J, arg_1a, 0, 4
T, -1, -1, out_collect
H, -1, -1, arg_1b
W, -1, -1, 500
L, -1, -1, arg_1b
J, arg_1b, 0, 6
T, -1, -1, out_collect
H, -1, -1, arg_1a
H, -1, -1, arg_1c
W, -1, -1, 500
L, -1, -1, arg_1a
L, -1, -1, arg_1c
J, arg_2a, 0, 4
T, -1, -1, out_collect
H, -1, -1, arg_2b
W, -1, -1, 500
L, -1, -1, arg_2b
J, arg_2b, 0, 6
T, -1, -1, out_collect
H, -1, -1, arg_2a
H, -1, -1, arg_2c
W, -1, -1, 500
L, -1, -1, arg_2a
L, -1, -1, arg_2c
J, arg_3a, 0, 4
T, -1, -1, out_collect
H, -1, -1, arg_3b
W, -1, -1, 500
L, -1, -1, arg_3b
J, arg_3b, 0, 6
T, -1, -1, out_collect
H, -1, -1, arg_3a
H, -1, -1, arg_3c
W, -1, -1, 500
L, -1, -1, arg_3a
L, -1, -1, arg_3c
J, arg_4a, 0, 4
T, -1, -1, out_collect
H, -1, -1, arg_4b
W, -1, -1, 500
L, -1, -1, arg_4b
J, arg_4b, 0, 6
T, -1, -1, out_collect
H, -1, -1, arg_4a
H, -1, -1, arg_4c
W, -1, -1, 500
L, -1, -1, arg_4a
L, -1, -1, arg_4c
J, arg_5a, 0, 4
T, -1, -1, out_collect
H, -1, -1, arg_5b
W, -1, -1, 500
L, -1, -1, arg_5b
J, arg_5b, 0, 6
T, -1, -1, out_collect
H, -1, -1, arg_5a
H, -1, -1, arg_5c
W, -1, -1, 500
L, -1, -1, arg_5a
L, -1, -1, arg_5c
J, arg_6a, 0, 4
T, -1, -1, out_collect
H, -1, -1, arg_6b
W, -1, -1, 500
L, -1, -1, arg_6b
J, arg_6b, 0, 6
T, -1, -1, out_collect
H, -1, -1, arg_6a
H, -1, -1, arg_6c
W, -1, -1, 500
L, -1, -1, arg_6a
L, -1, -1, arg_6c
J, arg_7a, 0, 4
T, -1, -1, out_collect
H, -1, -1, arg_7b
W, -1, -1, 500
L, -1, -1, arg_7b
J, arg_7b, 0, 6
T, -1, -1, out_collect
H, -1, -1, arg_7a
H, -1, -1, arg_7c
W, -1, -1, 500
L, -1, -1, arg_7a
L, -1, -1, arg_7c
J, arg_8a, 0, 4
T, -1, -1, out_collect
H, -1, -1, arg_8b
W, -1, -1, 500
L, -1, -1, arg_8b
J, arg_8b, 0, 6
T, -1, -1, out_collect
H, -1, -1, arg_8a
H, -1, -1, arg_8c
W, -1, -1, 500
L, -1, -1, arg_8a
L, -1, -1, arg_8c
J, arg_9a, 0, 4
T, -1, -1, out_collect
H, -1, -1, arg_9b
W, -1, -1, 500
L, -1, -1, arg_9b
J, arg_9b, 0, 6
T, -1, -1, out_collect
H, -1, -1, arg_9a
H, -1, -1, arg_9c
W, -1, -1, 500
L, -1, -1, arg_9a
L, -1, -1, arg_9c;

)"""";

const char tictactoe_symbin[] = {
  "\x78\x56\x34\x12\x08\x01\x00\x00" "init\0oxo_1o\0oxo_1x\0oxo_2o\0oxo_2x\0oxo_3o\0oxo_3x\0oxo_4\0oxo_5\0oxo_6\0oxo_7\0oxo_8\0oxo_9\0toggle\0collect\0single\0triple\0sub_collect\0sub_match_123\0sub_match_456\0sub_match_789\0sub_match_147\0sub_match_258\0sub_match_369\0sub_match_159\0sub_match_357\0sub_match_all\0sub_clear\0\0\0\0\0"
  "\x78\x56\x34\x12\x30\x00\x00\x00" "out_score\0out_win_row\0out_win_all\0out_collect\0\0\0"
  "\x00\x00\x00\x00\x00\x00\x00\x00" "arg_1a\0arg_1b\0arg_1c\0arg_2a\0arg_2b\0arg_2c\0arg_3a\0arg_3b\0arg_3c\0arg_4a\0arg_4b\0arg_4c\0arg_5a\0arg_5b\0arg_5c\0arg_6a\0arg_6b\0arg_6c\0arg_7a\0arg_7b\0arg_7c\0arg_8a\0arg_8b\0arg_8c\0arg_9a\0arg_9b\0arg_9c\0arg_x\0arg_o\0arg_triple\0arg_collect\0\0"
};

const uint16_t tictactoe_hexbin[] = {
  0x001E, 0x002C, 0x004E, 0x006C, 0x008A, 0x00A4, 0x00C6, 0x00E4, 0x0102, 0x0128, 0x0146, 0x0168, 
  0x0186, 0x01A8, 0x01CE, 0x01C2, 0x01C8, 0x03B4, 0x01F4, 0x0212, 0x0230, 0x024E, 0x026C, 0x028A, 
  0x02A8, 0x02C6, 0x02E4, 0x033A, 0xFFFF, 0x0000, 0x0050, 0xFFFF, 0xFFFF, 0x0001, 0x004C, 0xFFFF, 
  0xFFFF, 0x001E, 0x0053, 0xFFFF, 0xFFFF, 0x001B, 0xFFFF, 0x0001, 0x004A, 0x0000, 0xFFFF, 0x0000, 
  0x004A, 0x0001, 0xFFFF, 0x0000, 0x0048, 0xFFFF, 0xFFFF, 0x0000, 0x0048, 0xFFFF, 0xFFFF, 0x0002, 
  0x0053, 0xFFFF, 0xFFFF, 0x0012, 0x0053, 0xFFFF, 0xFFFF, 0x0015, 0x0053, 0xFFFF, 0xFFFF, 0x0018, 
  0x0053, 0xFFFF, 0xFFFF, 0x001A, 0xFFFF, 0x0002, 0x004A, 0x0000, 0xFFFF, 0x0000, 0x004A, 0x0001, 
  0xFFFF, 0x0000, 0x0048, 0xFFFF, 0xFFFF, 0x0001, 0x0053, 0xFFFF, 0xFFFF, 0x0012, 0x0053, 0xFFFF, 
  0xFFFF, 0x0015, 0x0053, 0xFFFF, 0xFFFF, 0x0018, 0x0053, 0xFFFF, 0xFFFF, 0x001A, 0xFFFF, 0x0003, 
  0x004A, 0x0003, 0xFFFF, 0x0000, 0x004A, 0x0004, 0xFFFF, 0x0000, 0x0048, 0xFFFF, 0xFFFF, 0x0003, 
  0x0048, 0xFFFF, 0xFFFF, 0x0005, 0x0053, 0xFFFF, 0xFFFF, 0x0012, 0x0053, 0xFFFF, 0xFFFF, 0x0016, 
  0x0053, 0xFFFF, 0xFFFF, 0x001A, 0xFFFF, 0x0004, 0x004A, 0x0003, 0xFFFF, 0x0000, 0x004A, 0x0004, 
  0xFFFF, 0x0000, 0x0048, 0xFFFF, 0xFFFF, 0x0004, 0x0053, 0xFFFF, 0xFFFF, 0x0012, 0x0053, 0xFFFF, 
  0xFFFF, 0x0016, 0x0053, 0xFFFF, 0xFFFF, 0x001A, 0xFFFF, 0x0005, 0x004A, 0x0006, 0xFFFF, 0x0000, 
  0x004A, 0x0007, 0xFFFF, 0x0000, 0x0048, 0xFFFF, 0xFFFF, 0x0006, 0x0048, 0xFFFF, 0xFFFF, 0x0008, 
  0x0053, 0xFFFF, 0xFFFF, 0x0012, 0x0053, 0xFFFF, 0xFFFF, 0x0017, 0x0053, 0xFFFF, 0xFFFF, 0x0019, 
  0x0053, 0xFFFF, 0xFFFF, 0x001A, 0xFFFF, 0x0006, 0x004A, 0x0006, 0xFFFF, 0x0000, 0x004A, 0x0007, 
  0xFFFF, 0x0000, 0x0048, 0xFFFF, 0xFFFF, 0x0007, 0x0053, 0xFFFF, 0xFFFF, 0x0012, 0x0053, 0xFFFF, 
  0xFFFF, 0x0017, 0x0053, 0xFFFF, 0xFFFF, 0x0019, 0x0053, 0xFFFF, 0xFFFF, 0x001A, 0xFFFF, 0x0007, 
  0x004A, 0x0009, 0xFFFF, 0x0000, 0x004A, 0x000A, 0xFFFF, 0x0000, 0x0048, 0x001B, 0x000A, 0x0009, 
  0x0048, 0x001B, 0x000A, 0x000B, 0x0053, 0xFFFF, 0xFFFF, 0x0015, 0x0053, 0xFFFF, 0xFFFF, 0x0013, 
  0x0053, 0xFFFF, 0xFFFF, 0x001A, 0xFFFF, 0x0008, 0x004A, 0x000C, 0xFFFF, 0x0000, 0x004A, 0x000D, 
  0xFFFF, 0x0000, 0x0048, 0x001B, 0x000D, 0x000C, 0x0048, 0x001B, 0x000D, 0x000E, 0x0053, 0xFFFF, 
  0xFFFF, 0x0018, 0x0053, 0xFFFF, 0xFFFF, 0x0016, 0x0053, 0xFFFF, 0xFFFF, 0x0019, 0x0053, 0xFFFF, 
  0xFFFF, 0x0013, 0x0053, 0xFFFF, 0xFFFF, 0x001A, 0xFFFF, 0x0009, 0x004A, 0x000F, 0xFFFF, 0x0000, 
  0x004A, 0x0010, 0xFFFF, 0x0000, 0x0048, 0x001B, 0x0010, 0x000F, 0x0048, 0x001B, 0x0010, 0x0011, 
  0x0053, 0xFFFF, 0xFFFF, 0x0017, 0x0053, 0xFFFF, 0xFFFF, 0x0013, 0x0053, 0xFFFF, 0xFFFF, 0x001A, 
  0xFFFF, 0x000A, 0x004A, 0x0012, 0xFFFF, 0x0000, 0x004A, 0x0013, 0xFFFF, 0x0000, 0x0048, 0x001B, 
  0x0013, 0x0012, 0x0048, 0x001B, 0x0013, 0x0014, 0x0053, 0xFFFF, 0xFFFF, 0x0014, 0x0053, 0xFFFF, 
  0xFFFF, 0x0015, 0x0053, 0xFFFF, 0xFFFF, 0x0019, 0x0053, 0xFFFF, 0xFFFF, 0x001A, 0xFFFF, 0x000B, 
  0x004A, 0x0015, 0xFFFF, 0x0000, 0x004A, 0x0016, 0xFFFF, 0x0000, 0x0048, 0x001B, 0x0016, 0x0015, 
  0x0048, 0x001B, 0x0016, 0x0017, 0x0053, 0xFFFF, 0xFFFF, 0x0016, 0x0053, 0xFFFF, 0xFFFF, 0x0014, 
  0x0053, 0xFFFF, 0xFFFF, 0x001A, 0xFFFF, 0x000C, 0x004A, 0x0018, 0xFFFF, 0x0000, 0x004A, 0x0019, 
  0xFFFF, 0x0000, 0x0048, 0x001B, 0x0019, 0x0018, 0x0048, 0x001B, 0x0019, 0x001A, 0x0053, 0xFFFF, 
  0xFFFF, 0x0018, 0x0053, 0xFFFF, 0xFFFF, 0x0017, 0x0053, 0xFFFF, 0xFFFF, 0x0014, 0x0053, 0xFFFF, 
  0xFFFF, 0x001A, 0xFFFF, 0x000D, 0x004A, 0x001B, 0x0000, 0x0003, 0x004C, 0xFFFF, 0xFFFF, 0x001B, 
  0x0048, 0xFFFF, 0xFFFF, 0x001C, 0x004A, 0xFFFF, 0xFFFF, 0xFFFF, 0x004C, 0xFFFF, 0xFFFF, 0x001C, 
  0x0048, 0xFFFF, 0xFFFF, 0x001B, 0xFFFF, 0x000F, 0x004C, 0xFFFF, 0xFFFF, 0x001D, 0xFFFF, 0x0010, 
  0x0048, 0xFFFF, 0xFFFF, 0x001D, 0xFFFF, 0x000E, 0x0048, 0xFFFF, 0xFFFF, 0x001E, 0x0053, 0xFFFF, 
  0xFFFF, 0x0011, 0x004A, 0x001D, 0x0000, 0x0004, 0x0059, 0xFFFF, 0xFFFF, 0x03E8, 0x0053, 0xFFFF, 
  0xFFFF, 0x0011, 0x0059, 0xFFFF, 0xFFFF, 0x03E8, 0x0053, 0xFFFF, 0xFFFF, 0x0011, 0x005A, 0xFFFF, 
  0xFFFF, 0x0000, 0x004C, 0xFFFF, 0xFFFF, 0x001E, 0xFFFF, 0x0012, 0x004A, 0x0000, 0x0000, 0x0002, 
  0x004A, 0x0003, 0x0000, 0xFFFF, 0x004A, 0x0006, 0x0003, 0xFFFF, 0x004A, 0x0001, 0x0000, 0xFFFF, 
  0x004A, 0x0004, 0x0000, 0xFFFF, 0x004A, 0x0007, 0x0000, 0xFFFF, 0x0054, 0xFFFF, 0xFFFF, 0x0001, 
  0xFFFF, 0x0013, 0x004A, 0x0009, 0x0000, 0x0002, 0x004A, 0x000C, 0x0000, 0xFFFF, 0x004A, 0x000F, 
  0x0003, 0xFFFF, 0x004A, 0x000A, 0x0000, 0xFFFF, 0x004A, 0x000D, 0x0000, 0xFFFF, 0x004A, 0x0010, 
  0x0000, 0xFFFF, 0x0054, 0xFFFF, 0xFFFF, 0x0001, 0xFFFF, 0x0014, 0x004A, 0x0012, 0x0000, 0x0002, 
  0x004A, 0x0015, 0x0000, 0xFFFF, 0x004A, 0x0018, 0x0003, 0xFFFF, 0x004A, 0x0013, 0x0000, 0xFFFF, 
  0x004A, 0x0016, 0x0000, 0xFFFF, 0x004A, 0x0019, 0x0000, 0xFFFF, 0x0054, 0xFFFF, 0xFFFF, 0x0001, 
  0xFFFF, 0x0015, 0x004A, 0x0000, 0x0000, 0x0002, 0x004A, 0x0009, 0x0000, 0xFFFF, 0x004A, 0x0012, 
  0x0003, 0xFFFF, 0x004A, 0x0001, 0x0000, 0xFFFF, 0x004A, 0x000A, 0x0000, 0xFFFF, 0x004A, 0x0013, 
  0x0000, 0xFFFF, 0x0054, 0xFFFF, 0xFFFF, 0x0001, 0xFFFF, 0x0016, 0x004A, 0x0003, 0x0000, 0x0002, 
  0x004A, 0x000C, 0x0000, 0xFFFF, 0x004A, 0x0015, 0x0003, 0xFFFF, 0x004A, 0x0004, 0x0000, 0xFFFF, 
  0x004A, 0x000D, 0x0000, 0xFFFF, 0x004A, 0x0016, 0x0000, 0xFFFF, 0x0054, 0xFFFF, 0xFFFF, 0x0001, 
  0xFFFF, 0x0017, 0x004A, 0x0006, 0x0000, 0x0002, 0x004A, 0x000F, 0x0000, 0xFFFF, 0x004A, 0x0018, 
  0x0003, 0xFFFF, 0x004A, 0x0007, 0x0000, 0xFFFF, 0x004A, 0x0010, 0x0000, 0xFFFF, 0x004A, 0x0019, 
  0x0000, 0xFFFF, 0x0054, 0xFFFF, 0xFFFF, 0x0001, 0xFFFF, 0x0018, 0x004A, 0x0000, 0x0000, 0x0002, 
  0x004A, 0x000C, 0x0000, 0xFFFF, 0x004A, 0x0018, 0x0003, 0xFFFF, 0x004A, 0x0001, 0x0000, 0xFFFF, 
  0x004A, 0x000D, 0x0000, 0xFFFF, 0x004A, 0x0019, 0x0000, 0xFFFF, 0x0054, 0xFFFF, 0xFFFF, 0x0001, 
  0xFFFF, 0x0019, 0x004A, 0x0006, 0x0000, 0x0002, 0x004A, 0x000C, 0x0000, 0xFFFF, 0x004A, 0x0012, 
  0x0003, 0xFFFF, 0x004A, 0x0007, 0x0000, 0xFFFF, 0x004A, 0x000D, 0x0000, 0xFFFF, 0x004A, 0x0013, 
  0x0000, 0xFFFF, 0x0054, 0xFFFF, 0xFFFF, 0x0001, 0xFFFF, 0x001A, 0x0054, 0xFFFF, 0xFFFF, 0x0000, 
  0x005A, 0xFFFF, 0xFFFF, 0x0000, 0x0049, 0x0000, 0x0001, 0x0000, 0x0049, 0x0003, 0x0001, 0x0000, 
  0x0049, 0x0006, 0x0001, 0x0000, 0x0049, 0x0009, 0x0001, 0x0000, 0x0049, 0x000C, 0x0001, 0x0000, 
  0x0049, 0x000F, 0x0001, 0x0000, 0x0049, 0x0012, 0x0001, 0x0000, 0x0049, 0x0015, 0x0001, 0x0000, 
  0x0049, 0x0018, 0x0001, 0x0000, 0x0049, 0x0001, 0x0001, 0x0000, 0x0049, 0x0004, 0x0001, 0x0000, 
  0x0049, 0x0007, 0x0001, 0x0000, 0x0049, 0x000A, 0x0001, 0x0000, 0x0049, 0x000D, 0x0001, 0x0000, 
  0x0049, 0x0010, 0x0001, 0x0000, 0x0049, 0x0013, 0x0001, 0x0000, 0x0049, 0x0016, 0x0001, 0x0000, 
  0x0049, 0x0019, 0x0001, 0x0000, 0x0054, 0x0009, 0x0002, 0xFFFF, 0xFFFF, 0x001B, 0x004C, 0xFFFF, 
  0xFFFF, 0x0000, 0x004C, 0xFFFF, 0xFFFF, 0x0001, 0x004C, 0xFFFF, 0xFFFF, 0x0002, 0x004C, 0xFFFF, 
  0xFFFF, 0x0003, 0x004C, 0xFFFF, 0xFFFF, 0x0004, 0x004C, 0xFFFF, 0xFFFF, 0x0005, 0x004C, 0xFFFF, 
  0xFFFF, 0x0006, 0x004C, 0xFFFF, 0xFFFF, 0x0007, 0x004C, 0xFFFF, 0xFFFF, 0x0008, 0x004C, 0xFFFF, 
  0xFFFF, 0x0009, 0x004C, 0xFFFF, 0xFFFF, 0x000A, 0x004C, 0xFFFF, 0xFFFF, 0x000B, 0x004C, 0xFFFF, 
  0xFFFF, 0x000C, 0x004C, 0xFFFF, 0xFFFF, 0x000D, 0x004C, 0xFFFF, 0xFFFF, 0x000E, 0x004C, 0xFFFF, 
  0xFFFF, 0x000F, 0x004C, 0xFFFF, 0xFFFF, 0x0010, 0x004C, 0xFFFF, 0xFFFF, 0x0011, 0x004C, 0xFFFF, 
  0xFFFF, 0x0012, 0x004C, 0xFFFF, 0xFFFF, 0x0013, 0x004C, 0xFFFF, 0xFFFF, 0x0014, 0x004C, 0xFFFF, 
  0xFFFF, 0x0015, 0x004C, 0xFFFF, 0xFFFF, 0x0016, 0x004C, 0xFFFF, 0xFFFF, 0x0017, 0x004C, 0xFFFF, 
  0xFFFF, 0x0018, 0x004C, 0xFFFF, 0xFFFF, 0x0019, 0x004C, 0xFFFF, 0xFFFF, 0x001A, 0x004C, 0xFFFF, 
  0xFFFF, 0x001B, 0x0048, 0xFFFF, 0xFFFF, 0x001C, 0x004C, 0xFFFF, 0xFFFF, 0x001D, 0xFFFF, 0x0011, 
  0x004A, 0x0000, 0x0000, 0x0004, 0x0054, 0xFFFF, 0xFFFF, 0x0003, 0x0048, 0xFFFF, 0xFFFF, 0x0001, 
  0x0059, 0xFFFF, 0xFFFF, 0x01F4, 0x004C, 0xFFFF, 0xFFFF, 0x0001, 0x004A, 0x0001, 0x0000, 0x0006, 
  0x0054, 0xFFFF, 0xFFFF, 0x0003, 0x0048, 0xFFFF, 0xFFFF, 0x0000, 0x0048, 0xFFFF, 0xFFFF, 0x0002, 
  0x0059, 0xFFFF, 0xFFFF, 0x01F4, 0x004C, 0xFFFF, 0xFFFF, 0x0000, 0x004C, 0xFFFF, 0xFFFF, 0x0002, 
  0x004A, 0x0003, 0x0000, 0x0004, 0x0054, 0xFFFF, 0xFFFF, 0x0003, 0x0048, 0xFFFF, 0xFFFF, 0x0004, 
  0x0059, 0xFFFF, 0xFFFF, 0x01F4, 0x004C, 0xFFFF, 0xFFFF, 0x0004, 0x004A, 0x0004, 0x0000, 0x0006, 
  0x0054, 0xFFFF, 0xFFFF, 0x0003, 0x0048, 0xFFFF, 0xFFFF, 0x0003, 0x0048, 0xFFFF, 0xFFFF, 0x0005, 
  0x0059, 0xFFFF, 0xFFFF, 0x01F4, 0x004C, 0xFFFF, 0xFFFF, 0x0003, 0x004C, 0xFFFF, 0xFFFF, 0x0005, 
  0x004A, 0x0006, 0x0000, 0x0004, 0x0054, 0xFFFF, 0xFFFF, 0x0003, 0x0048, 0xFFFF, 0xFFFF, 0x0007, 
  0x0059, 0xFFFF, 0xFFFF, 0x01F4, 0x004C, 0xFFFF, 0xFFFF, 0x0007, 0x004A, 0x0007, 0x0000, 0x0006, 
  0x0054, 0xFFFF, 0xFFFF, 0x0003, 0x0048, 0xFFFF, 0xFFFF, 0x0006, 0x0048, 0xFFFF, 0xFFFF, 0x0008, 
  0x0059, 0xFFFF, 0xFFFF, 0x01F4, 0x004C, 0xFFFF, 0xFFFF, 0x0006, 0x004C, 0xFFFF, 0xFFFF, 0x0008, 
  0x004A, 0x0009, 0x0000, 0x0004, 0x0054, 0xFFFF, 0xFFFF, 0x0003, 0x0048, 0xFFFF, 0xFFFF, 0x000A, 
  0x0059, 0xFFFF, 0xFFFF, 0x01F4, 0x004C, 0xFFFF, 0xFFFF, 0x000A, 0x004A, 0x000A, 0x0000, 0x0006, 
  0x0054, 0xFFFF, 0xFFFF, 0x0003, 0x0048, 0xFFFF, 0xFFFF, 0x0009, 0x0048, 0xFFFF, 0xFFFF, 0x000B, 
  0x0059, 0xFFFF, 0xFFFF, 0x01F4, 0x004C, 0xFFFF, 0xFFFF, 0x0009, 0x004C, 0xFFFF, 0xFFFF, 0x000B, 
  0x004A, 0x000C, 0x0000, 0x0004, 0x0054, 0xFFFF, 0xFFFF, 0x0003, 0x0048, 0xFFFF, 0xFFFF, 0x000D, 
  0x0059, 0xFFFF, 0xFFFF, 0x01F4, 0x004C, 0xFFFF, 0xFFFF, 0x000D, 0x004A, 0x000D, 0x0000, 0x0006, 
  0x0054, 0xFFFF, 0xFFFF, 0x0003, 0x0048, 0xFFFF, 0xFFFF, 0x000C, 0x0048, 0xFFFF, 0xFFFF, 0x000E, 
  0x0059, 0xFFFF, 0xFFFF, 0x01F4, 0x004C, 0xFFFF, 0xFFFF, 0x000C, 0x004C, 0xFFFF, 0xFFFF, 0x000E, 
  0x004A, 0x000F, 0x0000, 0x0004, 0x0054, 0xFFFF, 0xFFFF, 0x0003, 0x0048, 0xFFFF, 0xFFFF, 0x0010, 
  0x0059, 0xFFFF, 0xFFFF, 0x01F4, 0x004C, 0xFFFF, 0xFFFF, 0x0010, 0x004A, 0x0010, 0x0000, 0x0006, 
  0x0054, 0xFFFF, 0xFFFF, 0x0003, 0x0048, 0xFFFF, 0xFFFF, 0x000F, 0x0048, 0xFFFF, 0xFFFF, 0x0011, 
  0x0059, 0xFFFF, 0xFFFF, 0x01F4, 0x004C, 0xFFFF, 0xFFFF, 0x000F, 0x004C, 0xFFFF, 0xFFFF, 0x0011, 
  0x004A, 0x0012, 0x0000, 0x0004, 0x0054, 0xFFFF, 0xFFFF, 0x0003, 0x0048, 0xFFFF, 0xFFFF, 0x0013, 
  0x0059, 0xFFFF, 0xFFFF, 0x01F4, 0x004C, 0xFFFF, 0xFFFF, 0x0013, 0x004A, 0x0013, 0x0000, 0x0006, 
  0x0054, 0xFFFF, 0xFFFF, 0x0003, 0x0048, 0xFFFF, 0xFFFF, 0x0012, 0x0048, 0xFFFF, 0xFFFF, 0x0014, 
  0x0059, 0xFFFF, 0xFFFF, 0x01F4, 0x004C, 0xFFFF, 0xFFFF, 0x0012, 0x004C, 0xFFFF, 0xFFFF, 0x0014, 
  0x004A, 0x0015, 0x0000, 0x0004, 0x0054, 0xFFFF, 0xFFFF, 0x0003, 0x0048, 0xFFFF, 0xFFFF, 0x0016, 
  0x0059, 0xFFFF, 0xFFFF, 0x01F4, 0x004C, 0xFFFF, 0xFFFF, 0x0016, 0x004A, 0x0016, 0x0000, 0x0006, 
  0x0054, 0xFFFF, 0xFFFF, 0x0003, 0x0048, 0xFFFF, 0xFFFF, 0x0015, 0x0048, 0xFFFF, 0xFFFF, 0x0017, 
  0x0059, 0xFFFF, 0xFFFF, 0x01F4, 0x004C, 0xFFFF, 0xFFFF, 0x0015, 0x004C, 0xFFFF, 0xFFFF, 0x0017, 
  0x004A, 0x0018, 0x0000, 0x0004, 0x0054, 0xFFFF, 0xFFFF, 0x0003, 0x0048, 0xFFFF, 0xFFFF, 0x0019, 
  0x0059, 0xFFFF, 0xFFFF, 0x01F4, 0x004C, 0xFFFF, 0xFFFF, 0x0019, 0x004A, 0x0019, 0x0000, 0x0006, 
  0x0054, 0xFFFF, 0xFFFF, 0x0003, 0x0048, 0xFFFF, 0xFFFF, 0x0018, 0x0048, 0xFFFF, 0xFFFF, 0x001A, 
  0x0059, 0xFFFF, 0xFFFF, 0x01F4, 0x004C, 0xFFFF, 0xFFFF, 0x0018, 0x004C, 0xFFFF, 0xFFFF, 0x001A, 
  0xFFFF, 0xFFFF
};

};
